import {Component, ElementRef, Input, ViewChild} from "@angular/core";

@Component({
  selector: 'infinitable',
  template: `
    <div #tblDiv scroller-container>
      <div scroller [style.height.px]="tableHeight">
        <table #table [style.transform]="'translateY(' + yTblPos + 'px)'" class="table selectable">
          <tbody #tblBody>
          <tr #tblRow *ngIf="!viewportItems || viewportItems.length == 0">
            <td shrunked>Empty</td>
          </tr>
          <tr #tblRow *ngFor="let item of viewportItems">
            {{item}}
            
          </tr>
          </tbody>
        </table>
      </div>
    </div>
  `,
  styles: [`
    :host {
      display: flex;
      flex-grow: 1;
      flex-direction: column;
    }

    tr {
      height: min-content;
    }

    /*[scroller] {
      display: flex;
      flex-direction: column;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
    }*/

    [scroller-container] {
      position: relative;
      flex-grow: 1;
      overflow-y: scroll;
      overflow-x: hidden;
      display: flex;
      flex-direction: column;
    }

    table {
      position: relative;
    }
  `]
})
export class InfinitableComponent {
  @ViewChild("tblRow") tblRow: ElementRef;
  @ViewChild("tblDiv") tblDiv: ElementRef;
  @ViewChild("tblBody") tblBody: ElementRef;
  items: string[] = ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","11","1","1","1","1","1","1","1","1","1","1","1","1","11",];

  get yTblPos() {
    let rows = 0;
    if (this.tblDiv !== undefined) {
      rows = Math.trunc(this.tblDiv.nativeElement.scrollTop / this.rowHeight);
    }
    return rows * this.rowHeight;
  }

  get tableHeight() {
    return this.viewportRows * this.rowHeight;
  }

  private get viewportRows() {
    let divHeight = 0;
    if (this.tblDiv !== undefined) {
      divHeight = this.tblDiv.nativeElement.clientHeight;
    }
    return Math.ceil(divHeight / this.rowHeight);
  }

  get viewportItems() {
    let start = this.posToRecord(this.tblDiv.nativeElement.scrollTop);
    let end = start + this.viewportRows;
    return this.items.slice(start, end + 1);
  }

  private get rowHeight() {
    let rowHeight = 0;
    if (this.tblRow !== undefined) {
      rowHeight = this.tblRow.nativeElement.clientHeight;
    }
    return rowHeight;
  }

  private posToRecord(pos: number) {
    return Math.floor(pos / this.rowHeight);
  }

}
